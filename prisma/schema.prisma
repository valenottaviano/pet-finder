generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?             @map("email_verified")
  image                String?
  password             String?
  phone                String?
  role                 UserRole              @default(USER)
  accounts             Account[]
  verificationTokens   VerificationToken[]
  passwordResetTokens  PasswordResetToken[]
  emailChangeTokens    EmailChangeToken[]
  pets                 Pet[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model EmailChangeToken {
  id        String   @id @default(cuid())
  currentEmail String @map("current_email")
  newEmail     String @map("new_email")
  token        String @unique
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_change_tokens")
}

model Pet {
  id           String      @id // Removed @default(cuid()) - will be set manually
  name         String
  type         PetType
  sex          PetSex
  birthDate    DateTime?   @map("birth_date")
  breed        String?
  size         PetSize?
  hairType     HairType?   @map("hair_type")
  hairPattern  String?     @map("hair_pattern")
  color        String?
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  userId       String      @map("user_id")
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos       PetPhoto[]
  scanEvents   ScanEvent[]

  @@map("pets")
}

model PetPhoto {
  id        String   @id @default(cuid())
  url       String
  publicId  String?  @map("public_id") // Para servicios como Cloudinary
  isPrimary Boolean  @default(false) @map("is_primary")
  createdAt DateTime @default(now()) @map("created_at")
  petId     String   @map("pet_id")
  pet       Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@map("pet_photos")
}

model PetAlertPost {
  id          String          @id @default(cuid())
  petId       String          @map("pet_id")
  status      AlertStatus
  description String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  pet         Pet             @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@map("pet_alert_posts")
}

enum AlertStatus {
  LOST
  FOUND
}

enum PetType {
  DOG
  CAT
  BIRD
  RABBIT
  HAMSTER
  FISH
  REPTILE
  OTHER
}

enum PetSex {
  MALE
  FEMALE
  UNKNOWN
}

enum PetSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

enum HairType {
  SHORT
  MEDIUM
  LONG
  CURLY
  HAIRLESS
}

model ScanEvent {
  id        String   @id @default(cuid())
  petId     String   @map("pet_id")
  pet       Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  latitude  Float
  longitude Float
  userAgent String?  @map("user_agent")
  ipAddress String?  @map("ip_address") // Ãštil para detectar patrones
  createdAt DateTime @default(now()) @map("created_at")

  @@index([petId])
  @@index([createdAt])
  @@map("scan_events")
}